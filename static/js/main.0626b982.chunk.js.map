{"version":3,"sources":["FileBlock.js","localStorage.js","MyEditor.js","App.js","index.js"],"names":["FileBlock","useState","file","setFile","listType","onRemove","beforeUpload","icon","UploadOutlined","useLocalStorage","key","initialValue","isReset","item","localStorage","getItem","JSON","parse","removeItem","error","console","log","storedValue","setStoredValue","value","setItem","stringify","BlockRenderer","contentBlock","getType","component","Media","editable","props","media","entity","contentState","getEntity","block","getEntityAt","src","getData","type","ImageBlock","MyEditor","timeoutID","useRef","title","setTitle","rawContent","setRawContent","content","convertFromRaw","EditorState","createWithContent","createEmpty","editorState","setEditorState","useEffect","clearTimeout","current","setTimeout","getCurrentContent","convertToRaw","toggleStyle","newState","RichUtils","toggleInlineStyle","addMedia","createEntity","newEditorState","AtomicBlockUtils","insertAtomicBlock","getLastCreatedEntityKey","Title","onChange","e","target","placeholder","autoFocus","ToolBar","ToolBTN","onClick","FormatBold","FormatItalic","id","accept","event","theFile","files","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","style","display","htmlFor","ImageOutlined","Attachment","blockRendererFn","handleKeyCommand","command","styled","input","img","div","button","App","GlobalStyle","Header","SubmitBTN","MainBox","createGlobalStyle","header","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKe,SAASA,IACtB,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAYA,OACE,cAAC,IAAD,CAAQC,SAAS,UAAUC,SAVZ,SAACH,GAChBC,EAAQ,OASuCG,aAN5B,SAACJ,GAEpB,OADAC,EAAQD,IACD,GAIP,UACIA,GAAQ,cAAC,IAAD,CAAQK,KAAM,cAACC,EAAA,EAAD,IAAd,2BClBT,I,QAAMC,EAAkB,SAACC,EAAKC,EAAcC,GACjD,MAAsCX,oBAAS,WAC7C,IAEE,IAAMY,EAAOC,aAAaC,QAAQL,GAElC,OAAGG,IAASD,EACHI,KAAKC,MAAMJ,IAGfD,GAEDE,aAAaI,WAAWR,GAGK,oBAAjBC,EAA8BA,IAAiBA,GAGjE,MAAOQ,GAEL,OADAC,QAAQC,IAAIF,GACmB,oBAAjBR,EAA8BA,IAAiBA,MAnBjE,mBAAOW,EAAP,KAAoBC,EAApB,KAmCA,MAAO,CAACD,EAZS,SAACE,GAChB,IAEED,EAAeC,GAEfV,aAAaW,QAAQf,EAAKM,KAAKU,UAAUF,IAE3C,MAAOL,GACLC,QAAQC,IAAIF,O,OCzBjB,SAASQ,EAAcC,GAEtB,GAAa,WADAA,EAAaC,UAExB,MAAO,CACLC,UAAWC,EACXC,UAAU,GAMhB,SAASD,EAAME,GACb,IAGIC,EAHEC,EAASF,EAAMG,aAAaC,UAAUJ,EAAMK,MAAMC,YAAY,IAC5DC,EAAQL,EAAOM,UAAfD,IACFE,EAAOP,EAAON,UASpB,MANa,UAATa,EACFR,EAAQ,cAACS,EAAD,CAAYH,IAAKA,IAET,SAATE,IACPR,EAAQ,cAAClC,EAAD,CAAWwC,IAAKA,KAEnBN,EAGM,SAASU,IAEtB,IAAMC,EAAYC,iBAAO,GACzB,EAA0BrC,EAAgB,QAAS,IAAnD,mBAAOsC,EAAP,KAAcC,EAAd,KACA,EAAoCvC,EAAgB,UAAW,MAA/D,mBAAOwC,EAAP,KAAmBC,EAAnB,KACA,EAAsCjD,oBAAS,WAC7C,GAAIgD,EAAY,CACd,IAAME,EAAUC,yBAAeH,GAC/B,OAAOI,cAAYC,kBAAkBH,GAGrC,OAAOE,cAAYE,iBANvB,mBAAOC,EAAP,KAAoBC,EAApB,KAWAC,qBAAU,WACRC,aAAad,EAAUe,SACvBf,EAAUe,QAAUC,YAAW,WAC7B,IAAMV,EAAUK,EAAYM,oBAC5BZ,EAAca,uBAAaZ,IAC3B/B,QAAQC,IAAI,qBACX,OAEF,CAACmC,IAGJ,IAUMQ,EAAc,SAACtB,GACnB,IAAMuB,EAAWC,YAAUC,kBAAkBX,EAAad,GAC1De,EAAeQ,IAgBXG,EAAW,SAAC1B,EAAMF,GACtB,IAAML,EAASqB,EACZM,oBACAO,aAAa3B,EAAM,YAAa,CAAEF,QAC/B8B,EAAiBC,mBAAiBC,kBACtChB,EACArB,EAAOsC,0BACP,KAEFhB,EAAea,IAGjB,OACE,qCACE,cAACI,EAAD,CAAOlD,MAAOuB,EAAO4B,SAAU,SAACC,GAAD,OAAO5B,EAAS4B,EAAEC,OAAOrD,QAAQkB,KAAK,OAAOoC,YAAY,sBAAsBC,WAAS,IACvH,eAACC,EAAD,WACE,cAACC,EAAD,CAASC,QAAS,kBAAMlB,EAAY,SAApC,SACE,cAACmB,EAAA,EAAD,MAEF,cAACF,EAAD,CAASC,QAAS,kBAAMlB,EAAY,WAApC,SACE,cAACoB,EAAA,EAAD,MAGF,uBAAOC,GAAG,aAAa3C,KAAK,OAAO4C,OAAO,UAAUX,SApCzC,SAACY,GAEhB,IACMC,EADsBD,EAArBV,OAAUY,MACK,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAClB,IAAMrD,EAAMqD,EAAcC,cAAcC,OACxC3B,EAAS,QAAS5B,IAEpBkD,EAAOM,cAAcR,IA2BuDS,MAAO,CAACC,QAAQ,UACxF,cAACjB,EAAD,UACE,uBAAOkB,QAAQ,aAAf,SACE,cAACC,EAAA,EAAD,QAIJ,cAACnB,EAAD,CAASC,QAAS,kBAAMd,EAAS,OAAQ,OAAzC,SACE,cAACiC,EAAA,EAAD,SAKJ,cAAC,SAAD,CACEC,gBAAiB3E,EACjB4E,iBAlEmB,SAACC,EAAShD,GACjC,IAAMS,EAAWC,YAAUqC,iBAAiB/C,EAAagD,GACzD,OAAIvC,GACFR,EAAeQ,GACR,WAEF,eA6DHT,YAAaA,EACbmB,SAAUlB,EACVqB,YAAY,0BAOpB,I,QAAMJ,EAAQ+B,IAAOC,MAAV,8HAQL/D,EAAa8D,IAAOE,IAAV,4DAKV3B,EAAUyB,IAAOG,IAAV,mOAWP3B,EAAUwB,IAAOI,OAAV,mWC9JE,SAASC,IACtB,OACE,qCACE,cAACC,EAAD,IACA,eAACC,EAAD,WACE,6CACA,cAACC,EAAD,wBAGF,cAACC,EAAD,UACE,cAACtE,EAAD,SAOR,IAAMmE,EAAcI,YAAH,mhBAyBXH,EAASP,IAAOW,OAAV,uPAcNH,EAAYR,IAAOI,OAAV,2MAWTK,EAAUT,IAAOG,IAAV,kHCnEbS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACT,EAAD,MAEFU,SAASC,eAAe,W","file":"static/js/main.0626b982.chunk.js","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport { Upload, Button } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { useState } from 'react';\r\n\r\nexport default function FileBlock() {\r\n  const [file, setFile] = useState();\r\n\r\n  // 清理文件\r\n  const onRemove = (file) => {\r\n    setFile(null);\r\n  };\r\n\r\n  const beforeUpload = (file) => {\r\n    setFile(file);\r\n    return false; // 不要现在上传\r\n  };\r\n\r\n  return (\r\n    <Upload listType=\"picture\" onRemove={onRemove} beforeUpload={beforeUpload}>\r\n      {!file && <Button icon={<UploadOutlined />}>Select File</Button>}\r\n    </Upload>\r\n  );\r\n}","import { useState } from \"react\";\r\n\r\nexport const useLocalStorage = (key, initialValue, isReset) => {\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // 通过key拿之前存的数据\r\n      const item = localStorage.getItem(key);\r\n      // 有数据\r\n      if(item && !isReset) {\r\n        return JSON.parse(item);\r\n      }\r\n      else {\r\n        if(isReset) {\r\n          // isReset是用来清楚localstorage上的数据\r\n          localStorage.removeItem(key);\r\n        }\r\n        // 初始值有可能是函数\r\n        return typeof initialValue === \"function\" ? initialValue() : initialValue\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n      return typeof initialValue === \"function\" ? initialValue() : initialValue;\r\n    }\r\n  });\r\n  // 存数据\r\n  const setValue = (value) => {\r\n    try {\r\n      // 改state\r\n      setStoredValue(value);\r\n      // 数据存到localStorage\r\n      localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}","import { AtomicBlockUtils, convertFromRaw, convertToRaw, Editor, EditorState, RichUtils } from 'draft-js';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Attachment, FormatBold, FormatItalic, ImageOutlined } from '@material-ui/icons';\r\nimport FileBlock from './FileBlock';\r\nimport { useLocalStorage } from './localStorage';\r\nimport \"draft-js/dist/Draft.css\";\r\n\r\n // render组件, 自定义entity\r\n function BlockRenderer(contentBlock) {\r\n  const type = contentBlock.getType();\r\n  if (type === \"atomic\") {\r\n    return {\r\n      component: Media,\r\n      editable: false\r\n    };\r\n  }\r\n}\r\n\r\n// 自定义组件\r\nfunction Media(props) {\r\n  const entity = props.contentState.getEntity(props.block.getEntityAt(0));\r\n  const { src } = entity.getData();\r\n  const type = entity.getType();\r\n  let media;\r\n\r\n  if (type === \"image\") {\r\n    media = <ImageBlock src={src} />;\r\n  } \r\n  else if (type === \"file\") {\r\n    media = <FileBlock src={src}/>;\r\n  }\r\n  return media;\r\n}\r\n\r\nexport default function MyEditor() {\r\n  \r\n  const timeoutID = useRef(0)// 保存的时候不需要 rerender，所以用ref\r\n  const [title, setTitle] = useLocalStorage('Title', '');\r\n  const [rawContent, setRawContent] = useLocalStorage('Content', null)\r\n  const [editorState, setEditorState] = useState(() => {\r\n    if (rawContent) {\r\n      const content = convertFromRaw(rawContent)\r\n      return EditorState.createWithContent(content);\r\n    }\r\n    else {\r\n      return EditorState.createEmpty();\r\n    }\r\n  });\r\n\r\n  // 防抖保存\r\n  useEffect(() => {\r\n    clearTimeout(timeoutID.current); // 1秒以内操作的话清掉之前的 setTimeout\r\n    timeoutID.current = setTimeout(() => {\r\n      const content = editorState.getCurrentContent();\r\n      setRawContent(convertToRaw(content))\r\n      console.log('Document Saved!')\r\n    }, 1000); // 没有操作1秒以后 自动保存\r\n\r\n  }, [editorState])\r\n\r\n  // 键盘控制\r\n  const handleKeyCommand = (command, editorState) => {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      setEditorState(newState);\r\n      return \"handled\";\r\n    }\r\n    return \"not-handled\";\r\n  };\r\n\r\n  // 按钮控制\r\n  const toggleStyle = (type) => {\r\n    const newState = RichUtils.toggleInlineStyle(editorState, type);\r\n    setEditorState(newState);\r\n  };\r\n\r\n  const addImage = (event) => {\r\n    // 拿到图片的src\r\n    const {target: { files }} = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const src = finishedEvent.currentTarget.result\r\n      addMedia(\"image\", src)\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  // 创建并插入entity\r\n  const addMedia = (type, src) => {\r\n    const entity = editorState\r\n      .getCurrentContent()\r\n      .createEntity(type, \"IMMUTABLE\", { src });\r\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(\r\n      editorState,\r\n      entity.getLastCreatedEntityKey(),\r\n      \" \"\r\n    );\r\n    setEditorState(newEditorState);\r\n  };\r\n\r\n  return(\r\n    <>\r\n      <Title value={title} onChange={(e) => setTitle(e.target.value)} type=\"text\" placeholder=\"Write title at here\" autoFocus />\r\n      <ToolBar>\r\n        <ToolBTN onClick={() => toggleStyle(\"BOLD\")}>\r\n          <FormatBold />\r\n        </ToolBTN>\r\n        <ToolBTN onClick={() => toggleStyle(\"ITALIC\")}>\r\n          <FormatItalic />\r\n        </ToolBTN>\r\n\r\n        <input id=\"image_file\" type=\"file\" accept=\"image/*\" onChange={addImage} style={{display:\"none\"}} />\r\n        <ToolBTN>\r\n          <label htmlFor=\"image_file\">\r\n            <ImageOutlined />\r\n          </label>\r\n        </ToolBTN>\r\n\r\n        <ToolBTN onClick={() => addMedia(\"file\", null)}>\r\n          <Attachment />\r\n        </ToolBTN>\r\n\r\n      </ToolBar>\r\n\r\n      <Editor\r\n        blockRendererFn={BlockRenderer}\r\n        handleKeyCommand={handleKeyCommand}\r\n        editorState={editorState}\r\n        onChange={setEditorState}\r\n        placeholder=\"Enter some text...\"\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n//============= Styled Component =================\r\nconst Title = styled.input`\r\n  height: 30px;\r\n  font-size: 20px;\r\n  outline: none;\r\n  border: none;\r\n  margin: 5rem 0 1rem 0;\r\n`;\r\n\r\nconst ImageBlock = styled.img`\r\n  width: 70%;\r\n  height: auto;\r\n`;\r\n\r\nconst ToolBar = styled.div`\r\n  display: flex;\r\n  padding: 5px 0;\r\n  border-top: 1px solid lightgrey;\r\n  border-bottom: 1px solid lightgrey;\r\n  margin-bottom: 1rem;\r\n  position: sticky;\r\n  top: 59px;\r\n  background-color: white;\r\n`;\r\n\r\nconst ToolBTN = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-left: 5px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: white;\r\n  \r\n  width: 30px;\r\n  height: 30px;\r\n  transition: all 200ms ease-in-out;\r\n\r\n  &:hover {\r\n    background-color: #E8F5FE;\r\n    color: #1DA1F2;\r\n  }\r\n`;\r\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport MyEditor from './MyEditor';\n\nexport default function App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Header>\n        <h1>Text Editor</h1>\n        <SubmitBTN>Submit</SubmitBTN>\n      </Header>\n            \n      <MainBox>\n        <MyEditor />\n      </MainBox>\n    </>\n  );\n}\n\n//===================== Styled Components =================\nconst GlobalStyle = createGlobalStyle`\n  * {\n      box-sizing: border-box;\n      padding: 0;\n      margin: 0;\n  }\n\n  body {\n    user-select: none;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n    Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n    font-size: 1rem;\n  }\n\n  img {\n    user-drag: none; \n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-drag: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    pointer-events: none;\n  }\n`;\n\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  \n  position: fixed;\n  top: 0;\n  width: 100%;\n  height: 60px;\n  border: 1px solid lightgrey;\n  border-top: none;\n  background: white;\n`;\n\nconst SubmitBTN = styled.button`\n  color: white;\n  background-color: #1DA1F2;\n  padding: 0.6rem 1rem;\n  border-radius: 1.5rem;\n  font-weight: bold;\n  cursor: pointer;\n  border: none;\n  outline: none;\n`;\n\nconst MainBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 60px auto 0;\n  width: 660px;\n`;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}